<?php
// $Id$

define('CBIS_LANGUAGE_SV', 1);
define('CBIS_LANGUAGE_EN', 2);

/**
 * Implementation of hook_perm().
 */
function hook_perm() {
  return array('administer cbis import');
}

/**
 * Implementation of hook_menu().
 */
function cbisimport_menu() {
  $menu = array();

  $menu['admin/settings/cbisimport'] = array(
    'title' => 'CBIS Import',
    'description' => 'Settings for the import from CBIS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbisimport_settings_form'),
    'file' => 'cbisimport.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer cbis import'),
  );

  $menu['webhooks/cbisimport/product/%'] = array(
    'page callback' => '_cbisimport_product_updated_webhook',
    'page arguments' => array(3),
    'file' => 'cbisimport.webhook.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $menu;
}

/**
 * Implementation hook_autoload_info().
 */
function cbisimport_autoload_info() {
  return array(
    'CbisClient' => array('file' => 'CbisClient.php'),
    'CbisTemplate' => array('file' => 'CbisTemplate.php'),
  );
}

/**
 * Implementation of hook_enable().
 */
function cbisimport_enable() {
  // Flush the autoload caches so that our classes are registered
  autoload_flush_caches();
}

/**
 * Returns an instance of the CbisClient.
 *
 * @param string $service
 *  The service that is to be accessed.
 * @return CbisClient
 */
function cbisimport_client($service) {
  return new CbisClient($service, array(
    'encoding'=>'UTF-8',
  ));
}

/**
 * Gets products from CBIS.
 *
 * @param array $options
 *  The query options to send to CBIS.
 * @return array
 *  The raw product data. Create a instance of CbisTemplate to
 */
function cbisimport_get_products($options=array(), $sanitize=TRUE) {
  $defaults = array(
    'languageId' => CBIS_LANGUAGE_SV,
    'categoryId' => 0,
    'templateId' => 0,
    'pageOffset' => 0,
    'itemsPerPage' => 10,
    'filter' => array(
      'OrderBy' => 'None',
      'SortOrder' => 'Descending',
      'SubCategoryId' => 0,
      'Highlights' => FALSE,
      'ProductType' => 'All',
      'WithOccasionsOnly' => FALSE,
      'ExcludeProductsWithoutOccasions' => FALSE,
    ),
  );

  $options = cbisimport_merge_recursive($defaults, $options);
  $client = cbisimport_client('Products');
  $res = $client->ListAll($options);
  $products = cbisimport_array($res->ListAllResult->Items->Product);
  foreach ($products as &$product) {
    $product->LanguageId = $options['languageId'];
  }
  if ($sanitize) {
    $insane = $products;
    $products = array();
    foreach ($insane as $product) {
      $products[] = CbisTemplate::sanitize($product);
    }
  }
  return $products;
}

/**
 * Gets a product from CBIS by id.
 *
 * @param array $options
 *  The query options to send to CBIS.
 * @return array
 *  The raw product data. Create a instance of CbisTemplate to
 */
function cbisimport_get_product($id, $options=array()) {
  $defaults = array(
    'languageId' => CBIS_LANGUAGE_SV,
    'categoryId' => 0,
    'templateId' => 0,
    'productId' => $id,
  );

  $options = cbisimport_merge_recursive($defaults, $options);
  $client = cbisimport_client('Products');
  $res = $client->GetById($options);
  $product = $res->GetByIdResult;
  $product->LanguageId = $options['languageId'];
  return $product;
}

/**
 * Gets the update status for all the products.
 *
 * @return array
 *  An associative array with the timestamps for when the products were
 *  updated keyed by the product id's.
 */
function cbisimport_product_update_status() {
  $client = cbisimport_client('Products');
  $res = $client->GetUpdateInformation();

  $updates = array();
  foreach(cbisimport_array($res->GetUpdateInformationResult->ProductUpdate) as $up) {
    $updates[$up->ProductId] = strtotime($up->LastUpdated, time());
  }
  return $updates;
}

/**
 * Normalizes results into arrays. This is necessary because the deserialized
 * xml from the soap client is inconsistent when it comes to collections of
 * elements that contain 1 versus 2 or more elements.
 *
 *    <a><b></b><a> => a->b == object
 *    <a><b></b><b></b><a> => a->b == array(object, object)
 *
 * @param mixed $v
 * @return array
 */
function cbisimport_array($v) {
  if (!is_array($v)) {
    $a=(array)$v;
    if (is_object($v) && empty($a)) {
      $v = array();
    }
    else {
      $v = array($v);
    }
  }
  return $v;
}

/**
 * An alternative to array_merge_recursive
 *
 * @return array
 */
function cbisimport_merge_recursive() {
  $args = func_get_args();
  $a = array_shift($args);

  foreach ($args as $b) {
    foreach ($b as $key => $val) {
      if (is_array($val) && is_array($a[$key])) {
        $b[$key] = custom_merge_recursive($a[$key], $val);
      }
    }
    $a = array_merge($a, $b);
  }

  return $a;
}

/**
 * Fetches a list of categories from CBIS.
 *
 * @return array
 */
function cbisimport_get_categories() {
  $client = cbisimport_client('Categories');
  $categories = array();
  $result = $client->ListAll(array(
    'languageId' => 1,
    'parentCategoryId' => 0,
  ));

  if ($result) {
    foreach (cbisimport_array($result->ListAllResult->Nodes->TreeNodeOfCategory) as $root) {
      _cbisimport_add_category($categories, $root);
    }
  }
  return $categories;
}

/**
 * Flattens the category tree from CBIS.
 *
 * @param array $categories
 * @param array $category
 * @return void
 */
function _cbisimport_add_category(&$categories, $category) {
  $categories[$category->Data->Id] = $category->Data;
  $category->Data->Children = array();
  foreach($category->Children as $child) {
    $categories[$category->Data->Id]->Children[] = $child->Data->Id;
    $categories[$child->Data->Id] = $child->Data;
    _cbisimport_add_children($categories, $child);
  }
}

/**
 * Fetches a list of templates from CBIS.
 *
 * @return array
 */
function cbisimport_get_templates() {
  static $templates;
  $cache_key = 'cbisimport:templates';

  if (!$templates && ($cache = cache_get($cache_key)) && isset($cache->data)) {
    $templates = $cache->data;
  }

  if (!$templates) {
    $templates = array();
    $client = cbisimport_client('Templates');
    $result = $client->ListAll(array(
      'languageId' => 1,
    ));
    foreach ($result->ListAllResult->Template as $template) {
      $templates[$template->Id] = $template;
    }
    cache_set($cache_key, $templates);
  }

  return $templates;
}

/**
 * Returns a specific template.
 *
 * @param int $id
 *  The Id of the template
 * @return object
 */
function cbisimport_get_template($id) {
  $templates = cbisimport_get_templates();

  $template = NULL;
  if (isset($templates[$id])) {
    $template = $templates[$id];
  }
  return $template;
}

/**
 * Function that should be run when we've fetched products from CBIS. This
 * will trigger hooks that inform other modules of updates and creations.
 *
 * @param array $product
 * @return void
 */
function cbisimport_product_recieved($product) {
  $info = (object)array(
    'mappings' => array(),
  );
  $info->product = $product;

  foreach ($product['Occasions'] as $o) {
    $o->Expanded = cbisimport_expand_occasion($o);
  }

  $info->current = db_fetch_array(db_query("SELECT * FROM {cbisimport_product} WHERE pid=%d", array(
    ':pid' => $product['Id'],
  )));
  $info->current['data'] = unserialize($info->current['data']);
  if ($info->current) {
    // Get node mappings for the product
    $res = db_query("SELECT `oid`, subid, nid FROM {cbisimport_product_node} WHERE pid=%d", array(
      ':pid' => $product['Id'],
    ));
    while ($mapping = db_fetch_array($res)) {
      $info->mappings[$mapping['oid']][$mapping['subid']] = $mapping['nid'];
    }
    $info->current['occasions'] = cbisimport_product_occasions($product['Id']);
  }
  module_invoke_all('cbisimport_saving_product', $info);
  cbisimport_product_write($product, $info->current);
}

function cbisimport_product_occasions($id) {
  static $so;
  $occasions = array();
  if (!isset($so[$id])) {
    $res = db_query("SELECT * FROM {cbisimport_product_occasion} WHERE pid=%d", array(
      ':pid' => $id,
    ));
    while ($o = db_fetch_array($res)) {
      $occasions[$o['oid']] = $o;
    }
    $so = array($id => $occasions);
  }
  else {
    $occasions = $so[$id];
  }
  return $occasions;
}

/**
 * Writes a product to the database.
 *
 * @param array $product
 * @param bool $update
 * @return void
 */
function cbisimport_product_write($product, $update=FALSE) {
  $entry = array(
    'pid' => $product['Id'],
    'name' => $product['Name'],
    'template' => $product['TemplateId'],
    'updated' => $product['PublishedDate'], // TODO: Exchange as soon as the API exposes mod-time.
    'data' => serialize($product),
  );
  drupal_write_record('cbisimport_product', $entry, $update ? array('pid') : NULL);

  $occasions = cbisimport_product_occasions($product['Id']);
  $delete = array();
  $update = array();
  $add = array();
  foreach (array_keys($occasions) as $id) {
    if (!isset($product['Occasions'][$id])) {
      $delete[] = $id;
      module_invoke_all('cbisimport_deleting_occasion', $occasions[$id], $product);
    }
    else {
      $update[] = $id;
    }
  }
  foreach (array_keys($product['Occasions']) as $id) {
    if (!isset($occasions[$id])) {
      $add[] = $id;
    }
  }

  // Delete old occasions
  if (!empty($delete)) {
    db_query(sprintf('DELETE FROM {cbisimport_product_occasion} WHERE `oid` IN(%s)',
      db_placeholders($delete)), $delete);
  }

  // Add new occasions
  foreach ($add as $id) {
    $record = _cbisimport_occasion_record($product['Occasions'][$id]);
    if ($record['oid'] && $record['pid'] && $record['start_date'] && $record['end_date']) {
      module_invoke_all('cbisimport_adding_occasion', $record, $product);
      drupal_write_record('cbisimport_product_occasion', $record);
    }
  }

  // Update existing occasions
  foreach ($update as $id) {
    $record = _cbisimport_occasion_record($product['Occasions'][$id]);
    module_invoke_all('cbisimport_updating_occasion', $record, $product);
    drupal_write_record('cbisimport_product_occasion', $record, array('oid'));
  }
}

function _cbisimport_occasion_record($occasion) {
  return array(
    'oid' => $occasion->Id,
    'pid' => $occasion->ProductId,
    'start_date' => $occasion->StartDate,
    'end_date' => $occasion->EndDate,
    'start_time' => $occasion->StartTime,
    'end_time' => $occasion->EndTime,
    'days' => $occasion->ValidDays,
  );
}

/**
 * Expands a occasion record into an array of start->end timestamp tuples.
 *
 * @param array $occasion
 * @return array
 */
function cbisimport_expand_occasion($occasion) {
  $occasions = array();
  $daymap = array(
    'sunday' => 0,
    'monday' => 1,
    'tuesday' => 2,
    'wednesday' => 3,
    'thursday' => 4,
    'friday' => 5,
    'saturday' => 6,
  );

  $r = $occasion;
  if (is_object($r)) {
    $r = _cbisimport_occasion_record($r);
  }

  $days = array();
  foreach (split(' ', $r['days']) as $day) {
    $days[$daymap[strtolower($day)]] = TRUE;
  }

  $day = $r['start_date'];
  while ($day <= $r['end_date']) {
    $wd = date('w', $day);
    if (isset($days[$wd])) {
      $occasions[] = array(
        $day + $r['start_time'],
        $day + $r['end_time'],
      );
    }
    $day += 60 * 60 * 24;
  }

  return $occasions;
}

/**
 * undocumented function
 *
 * @param int|object $info
 *  Either a product info object or a product id.
 * @param int $oid
 *  Optional. Occasion id. Defaults to 0.
 * @param int $subid
 *  Optional. Sub-identifier. Defaults to 0.
 * @return int
 * @author Hugo Wetterberg
 */
function cbisimport_mapping_exists($info, $oid = 0, $subid = 0) {
  return isset($info->mappings[$oid][$subid]) ? $info->mappings[$oid][$subid] : 0;
}

/**
 * Remove a product node assiociation.
 *
 * @param int $pid
 *  Product id.
 * @param int $nid
 *  Node id.
 * @param int $oid
 *  Optional. Occasion id. Defaults to 0.
 * @param int $subid
 *  Optional. Sub-identifier. Defaults to 0.
 * @return void
 */
function cbisimport_mapping_add($pid, $nid, $oid = 0, $subid = 0) {
  $values = array(
    'pid' => $pid,
    'oid' => $oid,
    'subid' => $subid,
    'nid' => $nid,
  );
  drupal_write_record('cbisimport_product_node', $values);
}

/**
 * Remove a product node assiociation.
 *
 * @param int $pid
 *  Product id.
 * @param int $oid
 *  Optional. Occasion id. Defaults to 0.
 * @param int $subid
 *  Optional. Sub-identifier. Defaults to 0.
 * @return void
 */
function cbisimport_mapping_remove($pid, $oid = 0, $subid = 0) {
  db_query("DELETE FROM {cbisimport_product_node}
    WHERE pid = %d AND `oid`= %d AND subid = %d", array(
      ':pid' => $pid,
      ':oid' => $oid,
      ':subid' => $subid,
    ));
}